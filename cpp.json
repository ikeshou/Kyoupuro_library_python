{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"AC_snippets": {
		"prefix": "kyoupuro",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"using namespace std;",
			"/* types */",
			"using i32 = int32_t; using ui32 = uint32_t; using i64 = int64_t; using ui64 = uint64_t; using i128 = __int128;",
			"using f32 = float;   using f64  = double;   using f80 = long double;",
			"using PII = pair<i32, i32>; using PLL = pair<i64, i64>; using PFF = pair<f32, f32>; using PDD = pair<f64, f64>;",
			"using VB  = vector<bool>;",
			"using VS  = vector<string>;",			
			"using VI  = vector<i32>;    using VL  = vector<i64>;    using VF  = vector<f32>;    using VD  = vector<f64>;",
			"using VVI = vector<VI>;     using VVL = vector<VL>;     using VVF = vector<VF>;     using VVD = vector<VD>;",
			"using VPI = vector<PII>;    using VPL = vector<PLL>;    using VPF = vector<PFF>;    using VPD = vector<PDD>;",
			"/* constants */",
			"constexpr i64 mod = 1000000007;                                // 10^9+7",
			"constexpr i64 inf = 1000000000000;                             // 10^12",
			"/* macros */",
			"#define MAX(c)        *max_element(ALL(c))",
			"#define MIN(c)        *min_element(ALL(c))",
			"#define SIZE(c)       (i64)((c).size())                        // unsined int (size_t) -> int64_t",
			"#define ALL(c)        (c).begin(), (c).end()",
			"#define RALL(c)       (c).rbegin(), (c).rend()",
			"#define REP(i, n)     for (i64 i=0; i<(i64)(n); ++i)           // 0 to n-1",
			"#define REPD(i, n)    for (i64 i=(i64)(n)-1; i>=0; --i)        // n-1 to 0",
			"/* useful printing */",
			"#define print(x)      cout << (x) << '\\n';",
			"#define printvec(v)   REP(_, SIZE(v)-1) cout << (v)[_] << ' '; cout << (v)[SIZE(v)-1] << '\\n';",
			"#define debug(x)      cerr << #x << \": \" << (x) << '\\n'",
			"#define debugvec(v)   for (size_t _ = 0; _ < (v).size(); ++_) {cerr << #v << '[' << _ << \"]: \" << (v)[_] << '\\n';}",
			"",
			"",
			"void Main() {",
				"\t${1:/* code */}",
				"",
			"}",
			"",
			"signed main() {",
				"\tcin.tie(nullptr);                                         // cin と cout の tie を切り高速化",
				"\tcout << fixed << setprecision(15);                        // 浮動小数点数が 1e-006 のように表示されることを防ぐ",
				"\tMain();",
			"}"
		],
		"description": "C++ template for programming competition"
	}
}